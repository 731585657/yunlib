<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2020/3/30 0030
 * Time: 16:21
 */

namespace app\admin\controller;


use app\common\controller\Backend;
use think\Db;
use think\Loader;
use think\Validate;

class Project extends Backend
{
    protected $model;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->model = model('Project');
    }


    public function  index(int $ids = null)
    {


        if ($this->request->isAjax()){
            $pid =  json_decode($this->request->get('filter'),true);

            $type_id=$pid['type_id'];
            list($where, $sort, $order, $offset, $limit) = $this->buildparams(null);

            $data['rows'] = $this->model->field('id,title,image,release_time,status,clicks,weigh')
                ->where('type_id',$type_id)->order("$sort $order,release_time desc")->limit($offset,$limit)->select();
            //var_dump($data);die;
            $data['total'] = $this->model->count();
            //var_dump($total);die;
            return json($data);
        }
        $this->assignconfig('type_id',$ids);
        return $this->view->fetch();

    }


    public function add(int $type_id = null)
    {

        //var_dump($type_id);die;
        if ($this->request->isAjax()){
            //验证token
            $this->token();
            $params = $this->request->post("row/a", []);
            $params['title'] = trim($params['title']);

            $params['create_time'] = date('Y-m-d H:i:s');

            //验证器验证
            $validate = \validate('Project');
            if (!$validate->check($params)){
                $this->error($validate->getError());
            }

            $row = $this->model->insert($params);

            if ($row){
                $this->success();

            }else{
                $this->error();
            }
        }
        //获取数据库最大的排序值+1
        $row = $this->model->field('max(weigh) as max')->where('status',1)->find();
        $max = $row['max']+1;

        $this->assign('max',$max);
        $this->assign('type_id', $type_id);


        return $this->fetch();
    }


    public function edit($ids = null)
    {

        $row = $this->model->get(['id' => $ids]);
        //var_dump($row);die;
        if (!$row) {
            $this->error(__('No Results were found'));
        }
        if ($this->request->isPost()) {

            $this->token();

            $params = $this->request->post("row/a", []);
            $params['title'] = trim($params['title']);


//            //这里需要针对name做唯一验证
//            $ruleValidate = \think\Loader::validate('Product');
//            //var_dump($ruleValidate);die;
//            $ruleValidate->rule([
//                'title' => 'require|format|unique:Product,title,' . $row->prod_id,
//            ]);
//            //var_dump($row);die;
//            $result = $row->validate()->save($params);
            // var_dump($result);die;

            $validate = \validate('Project');
            if (!$validate->check($params)) {
                $this->error($validate->getError());
            }
            $result = $row->where('id', $row->id)->update($params);
            if ($result === false) {
                $this->error($row->getError());
            }
            // Cache::rm('__menu__');
            $this->success();

        }


        $this->assign('row', $row);
        return $this->fetch();
    }


    /**
     * 删除
     */
    public function del($ids = "")
    {
        if ($ids) {
            $pk = $this->model->getPk();
            $adminIds = $this->getDataLimitAdminIds();
            if (is_array($adminIds)) {
                $this->model->where($this->dataLimitField, 'in', $adminIds);
            }
            $list = $this->model->where($pk, 'in', $ids)->select();

            $count = 0;
            Db::startTrans();
            try {
                foreach ($list as $k => $v) {
                    $count += $v->delete();
                }
                Db::commit();
            } catch (PDOException $e) {
                Db::rollback();
                $this->error($e->getMessage());
            } catch (Exception $e) {
                Db::rollback();
                $this->error($e->getMessage());
            }
            if ($count) {
                $this->success();
            } else {
                $this->error(__('No rows were deleted'));
            }
        }
        $this->error(__('Parameter %s can not be empty', 'ids'));
    }




}